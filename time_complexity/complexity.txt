1) int f() {
    s=0;
    for(i=1; i<=n; i++)
        s=s+1
}
=> n iterations
=> O(n) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
2) int f() {
    s=0;
    for(i=1; i<=n;i++)
        s=s+i 
    for(i=1;i<=m;i++)
        s=s+i 
}
=> n+m iterations
=> O(n+m) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
3) int f() {
    s=0;
    for(i=1;i<=n;i=i+2)
        s=s+i
}
=> (n+1)/2 iterations
=> O(n) time complexity 
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
4) int f() {
    s=0;
    for(i=1; i*i<=n;i++)
        s=s+i
}
=> sqrt(n) iterations 
=> O(sqrt(n)) time complexity 
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
5) int f(){
    s=0;
    while(i>1)
        i=i/2
}
=> log(n) iterations
=> O(logn) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
6) int f(){
    s=0;
    for(i=1;i*i<=n;i=i*2)
        s=s+i 
}
=> logn iterations
=> O(log(n)) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
7) int f() {
    s=0;
    for(i=1;i<=10;i++)
        for(j=1;j<=n;j++)
            s=i*j
}
=> 10*n iterations
=> O(n) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
8) int f() {
    s=0;
    for(i=0;i<=n;i++)
        for(j=1;j<=n;j++)
            s=i*j
}
=> (n+1)(n) iterations
=> O(n^2) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
9) int f() {
    s=0;
    for(i=1;i<=n;i++)
        for(j=1;j<=n;j*2)
            s=i*j
}
=> nlogn iterations
=> O(nlogn) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
10) int f() {
    s=0;
    for(i=1;i<=2^n;i++)
        s=s*i
}
=> 2^n iterations
=> O(2^n) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
11) int f() {
    s=0;
    for(i=1;i<=n;i++)
        for(j=1;j<=2pow(i);j++)
            s=i*j 
}
=> 2*2^(n-1) iterations
=> O(2^n) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
12) int f() {
    s=0;
    for(i=1;i<=n;i=i+3)
        s=s+i
}
=> (n/3)+1 iterations
=> O(n) time complexity
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
13) int f() {
    s=0;
    for(i=1;i*i*i<=n;i++)
        s=s+i
}
=> n^1/3 or cuberoot(n) iterations
=> O(cuberoot(n)) time complexity
=> O(1) space complexity 
------------------------------------------------------------------------------------------------------
14 ) int f() {
    int x=n;
    int y=x^2;
    long z=x*y;
    double p=3.14;
}
=> 0 iteration
=> O(1) time complexity 
=> O(1) space complexity
------------------------------------------------------------------------------------------------------
15) for(i=0;i<=n;i++)
    arr[i]=i
=> n+1 iterations
=> O(n) time complexity
=> O(n) space complexity
------------------------------------------------------------------------------------------------------
16) sum=0
    for(i=0;i<=n;i++)
        sum=sum+arr[i]
=> n+1 iterations
=> O(n) time complexity
=> O(n) space complexity
------------------------------------------------------------------------------------------------------
17) matrix [n][n]
    arr[n]
=> O(1) time complexity
=> O(n^2) space complexity
------------------------------------------------------------------------------------------------------
18) def solve():
   for i in range(n):
        for j in range(i // 2):
            # O(1) operation

------------------------------------------------------------------------------------------------------
19) k = 0
for i in range(n//2, n+1):
    j = 2
    while j<=n:
         k = k + n//2
         j = j * 2

------------------------------------------------------------------------------------------------------
20) The complexity of Binary search algorithm is: O(logn)
------------------------------------------------------------------------------------------------------
21) int a = 0, i = N; 
while (i > 0) { 
    a += i; 
    i /= 2; 
}

------------------------------------------------------------------------------------------------------
22) If an algorithm has a time complexity of O(1), then the complexity of it is ?
constant
polynomial
exponential
none of the mentioned
=> constant
------------------------------------------------------------------------------------------------------
23) If for an algorithm time complexity is given by O(log2n) then complexity will:
constant
polynomial
exponential
none of the mentioned
=> none of the mentioned (logarithmic)
------------------------------------------------------------------------------------------------------
24) If an algorithm has a time complexity of O(n), then the complexity of it is ?
constant
linear
exponential
none of the mentioned
=> linear
------------------------------------------------------------------------------------------------------
25) If for an algorithm time complexity is given by O((3/2)^n) then complexity will:
constant
quardratic
exponential
none of the mentioned
=> exponential
------------------------------------------------------------------------------------------------------
26) An algorithm consists of two independent piece of code, having complexities f(n) and g(n) respectively. What would be the complexity of the complete algorithm
f(n) x g(n)
MAX( f(n), g(n) )
MIN ( f(n), g(n) )
f(n) + g(n)
=> MAX(f(n), g(n))
------------------------------------------------------------------------------------------------------
27) To measure Time complexity of an algorithm Big O notation is used which:
describes limiting behaviour of the function
characterises a function based on growth of function
upper bound on growth rate of the function
all of the mentioned
=> all of the mentioned
------------------------------------------------------------------------------------------------------
28) TC ?
for i in range(3,n/3,3):
	for j in range(2,n/2,2):
		# O(1)

------------------------------------------------------------------------------------------------------
29) TC ?
def solve():
	i = 1
	while(i<n):
		x = i
		while(x>0):
			#O(1)
			x = x-1
		i = i-1
O(nlogn)
O(n)
O(n sqrt(n))
O(n^2)
None of the above
------------------------------------------------------------------------------------------------------
30) TC ?
for i in range(n):
	j = i-1
	ans=0
	while(j>=0):
		ans = ans+i+j
		j+=1
=>
------------------------------------------------------------------------------------------------------
31) TC ?
for i in range(N):
	for j in range(i,N):
		break
=> O(1)
------------------------------------------------------------------------------------------------------
